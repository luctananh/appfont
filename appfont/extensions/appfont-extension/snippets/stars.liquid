{% assign design_settings = shop.metafields.setting.style %}
{% if design_settings %}
  {% assign font_settings = design_settings | parse_json %}
  {% assign font_value = font_settings.value %}

  <script>
    window.fontSettings = {{ font_value | json }};
    console.log("Font settings from liquid:", window.fontSettings);
  </script>
{% else %}
  <p>No font settings found.</p>
{% endif %}

<script src="https://appfont--development.gadget.app/api/client/web.min.js" defer="defer"></script>

<script>
document.addEventListener("DOMContentLoaded", function () {
    // Hàm chèn CSS cho font từ URL blob
    function injectFontCSSFromBlob(blobURL, fontName, fontType, selectors) {
        const styleElement = document.createElement("style");
        styleElement.type = "text/css";

        // Định dạng format cho từng loại font
        let format = fontType === "ttf" ? "truetype" : fontType === "woff" ? "woff" : "opentype";

        let cssContent = `
            @font-face {
                font-family: "${fontName}";
                src: url('${blobURL}') format('${format}');
            }
        `;

        if (selectors) {
            cssContent += `
                ${selectors} {
                    font-family: "${fontName}" !important;
                }
            `;
        } else {
            console.warn("No elements selected. Font will not be applied.");
        }

        styleElement.appendChild(document.createTextNode(cssContent));
        document.head.appendChild(styleElement);

        console.log("CSS injected for font:", fontName, "with format:", format, "and selectors:", selectors);
    }

    // Hàm chèn CSS cho Google Fonts link
    function injectFontCSSFromGoogle(fontName, fontLink, selectors) {
        const styleElement = document.createElement("style");
        styleElement.type = "text/css";

        let cssContent = `
            @import url("${fontLink}");
        `;

        if (selectors) {
            cssContent += `
                ${selectors} {
                    font-family: "${fontName}" !important;
                }
            `;
        } else {
            console.warn("No elements selected. Font will not be applied.");
        }

        styleElement.appendChild(document.createTextNode(cssContent));
        document.head.appendChild(styleElement);

        console.log("Google Font CSS injected for:", fontName, "with link:", fontLink, "and selectors:", selectors);
    }

    // Hàm xác định type của font từ base64
    function getFontType(base64) {
        if (base64.startsWith('d09GR')) {
            return 'woff'; // WOFF
        } else if (base64.startsWith('AAEAAAA')) {
            return 'ttf'; // TTF
        } else if (base64.startsWith('T1RUTw')) {
            return 'otf'; // OTF
        }
        return null;
    }

    // Hàm chuyển đổi base64 thành blob
    function base64toBlob(base64, type) {
        try {
            const bytes = atob(base64);
            const byteNumbers = new Array(bytes.length);
            for (let i = 0; i < bytes.length; i++) {
                byteNumbers[i] = bytes.charCodeAt(i);
            }
            const byteArray = new Uint8Array(byteNumbers);
            return new Blob([byteArray], { type: type });
        } catch (error) {
            console.error("Error converting base64 to blob:", error);
            return null;
        }
    }

    // Kiểm tra nếu `fontSettings` tồn tại và có link
    if (window.fontSettings && window.fontSettings.link) {
        const fontName = window.fontSettings.name || 'CustomFont';
        const fontLink = window.fontSettings.link;
        const selectedElements = window.fontSettings.selectedElements;
        let selectors = selectedElements ? selectedElements.split(',').join(', ') : null;

        // Nếu link là base64
        if (fontLink.startsWith("d09GR") || fontLink.startsWith("AAEAAAA") || fontLink.startsWith("T1RUTw")) {
            const fontType = getFontType(fontLink);
            if (fontType) {
                try {
                    const blob = base64toBlob(fontLink, `font/${fontType}`);
                    if (blob) {
                        const blobURL = URL.createObjectURL(blob);
                        injectFontCSSFromBlob(blobURL, fontName, fontType, selectors);
                    } else {
                        console.error("Blob creation failed for:", fontName);
                    }
                } catch (error) {
                    console.error("Error processing base64 font:", error);
                }
            } else {
                console.error("Unsupported base64 font format");
            }
        }
        // Nếu link là Google Fonts
        else if (fontLink.startsWith("https://fonts.googleapis.com")) {
            injectFontCSSFromGoogle(fontName, fontLink, selectors);
        }
        // Nếu link là blob URL
        else if (fontLink.startsWith('blob:')) {
            let fileType = fontName.split('.').pop().toLowerCase();
            if (fileType === 'otf' || fileType === 'ttf' || fileType === 'woff') {
                injectFontCSSFromBlob(fontLink, fontName, fileType, selectors);
            } else {
                console.error("Error: cannot identify the type of font");
            }
        }
        // Nếu link là URL thông thường
        else if (fontLink) {
            injectFontCSSFromGoogle(fontName, fontLink, selectors);
        } else {
            console.error("Font link is missing or invalid.");
        }
    } else {
        console.error("Font settings not found or invalid.");
    }
});
</script>
